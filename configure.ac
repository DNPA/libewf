AC_PREREQ( 2.59 )

AC_INIT(
 [libewf],
 [20080430],
 [forensics@hoffmannbv.nl])

AC_CONFIG_SRCDIR(
 [include/libewf.h.in])

AM_INIT_AUTOMAKE(
 [libewf],
 [20080430])

dnl Function to test if a certain feature was enabled
AC_DEFUN([LIBEWF_TEST_ENABLE],
	[AC_ARG_ENABLE(
	 [$1],
	 [AS_HELP_STRING(
	  [--enable-$1],
	  [$3 (default is $4)])],
	 [ac_libewf_enable_$2=$enableval],
	 [ac_libewf_enable_$2=$4])dnl
	 AC_CACHE_CHECK(
	  [whether to enable $3],
	  [ac_libewf_enable_$2],
	  [ac_libewf_enable_$2=$4])dnl
])

dnl Function to detect if printf conversion specifier "%jd" is available
AC_DEFUN([LIBEWF_PRINTF_JD],
	[SAVE_CFLAGS="$CFLAGS"
	CFLAGS="$CFLAGS -Wall -Werror"
	AC_LANG_PUSH(C)
	AC_MSG_CHECKING(
	 [if printf supports the conversion specifier "%jd"])
	dnl First try to see if compilation and linkage without a parameter succeeds
	AC_LINK_IFELSE(
		[AC_LANG_PROGRAM(
		 [[#include <stdio.h>]],
		 [[printf( "%jd" ); ]] )],
		[AC_MSG_RESULT(
		 [no])],
		dnl Second try to see if compilation and linkage with a parameter succeeds
	 	[AC_LINK_IFELSE(
			[AC_LANG_PROGRAM(
			 [[#include <sys/types.h>
#include <stdio.h>]],
		 	 [[printf( "%jd", (off_t) 10 ); ]] )],
			dnl Third try to see if the program runs correctly
	 		 [AC_RUN_IFELSE(
				[AC_LANG_PROGRAM(
				 [[#include <sys/types.h>
#include <stdio.h>]],
				 [[char string[ 3 ];
if( snprintf( string, 3, "%jd", (off_t) 10 ) < 0 ) return( 1 );
if( ( string[ 0 ] != '1' ) || ( string[ 1 ] != '0' ) ) return( 1 ); ]] )],
				[AC_MSG_RESULT(
				 [yes])
				AC_DEFINE(
				 [HAVE_PRINTF_JD],
				 [1],
				 [Define to 1 if printf supports the conversion specifier "%jd".] )],
				[AC_MSG_RESULT(
				 [no])],
				[AC_MSG_RESULT(
				 [undetermined])] )],
			[AC_MSG_RESULT(
			 [no])] )] )
	AC_LANG_POP(C)
	CFLAGS="$SAVE_CFLAGS"])

dnl Function to detect if printf conversion specifier "%zd" is available
AC_DEFUN([LIBEWF_PRINTF_ZD],
	[SAVE_CFLAGS="$CFLAGS"
	 CFLAGS="$CFLAGS -Wall -Werror"
	 AC_LANG_PUSH(C)
	 AC_MSG_CHECKING(
	  [if printf supports the conversion specifier "%zd"])
	dnl First try to see if compilation and linkage without a parameter succeeds
	AC_LINK_IFELSE(
		[AC_LANG_PROGRAM(
		 [[#include <stdio.h>]],
		 [[printf( "%zd" ); ]] )],
		[AC_MSG_RESULT(
		 [no])],
		dnl Second try to see if compilation and linkage with a parameter succeeds
	 	[AC_LINK_IFELSE(
			[AC_LANG_PROGRAM(
			 [[#include <sys/types.h>
#include <stdio.h>]],
		 	 [[printf( "%zd", (size_t) 10 ); ]] )],
			dnl Third try to see if the program runs correctly
	 		 [AC_RUN_IFELSE(
				[AC_LANG_PROGRAM(
				 [[#include <sys/types.h>
#include <stdio.h>]],
				 [[char string[ 3 ];
if( snprintf( string, 3, "%zd", (size_t) 10 ) < 0 ) return( 1 );
if( ( string[ 0 ] != '1' ) || ( string[ 1 ] != '0' ) ) return( 1 ); ]] )],
				[AC_MSG_RESULT(
				 [yes])
				AC_DEFINE(
				 [HAVE_PRINTF_ZD],
				 [1],
				 [Define to 1 if printf supports the conversion specifier "%zd".] )],
				[AC_MSG_RESULT(
				 [no])],
				[AC_MSG_RESULT(
				 [undetermined])] )],
			[AC_MSG_RESULT(
			 [no])] )] )
	AC_LANG_POP(C)
	CFLAGS="$SAVE_CFLAGS"])

dnl Function to detect if ctime_r is defined according to the POSIX standard
AC_DEFUN([LIBEWF_FUNC_CTIME_R],
	[AC_CHECK_FUNC(
	 [ctime_r],
	 [AC_DEFINE(
	  [HAVE_CTIME_R],
	  [1],
	  [Define to 1 if you have the ctime_r function.] )
	 AC_LANG_PUSH(C)
	 AC_MSG_CHECKING(
	  [if ctime_r is defined according to the POSIX definition])
	 AC_LINK_IFELSE(
		AC_LANG_PROGRAM(
		 [[#include <time.h>]],
		 [[ctime_r(NULL,NULL,0)]]),
		[AC_MSG_RESULT(
		 [ctime_r with additional size argument detected])
		AC_DEFINE(
		 [HAVE_CTIME_R_SIZE],
		 [1],
		 [Define to 1 if you have the ctime_r function with a third size argument.] )],
		[AC_LINK_IFELSE(
			AC_LANG_PROGRAM(
			 [[#include <time.h>]],
			 [[ctime_r(NULL,NULL)]]),
			 [AC_MSG_RESULT(
			  [yes])],
			 [CPPFLAGS="$CPPFLAGS -D_POSIX_PTHREAD_SEMANTICS"
			 AC_LINK_IFELSE(
				AC_LANG_PROGRAM(
				 [[#include <time.h>]],
				 [[ctime_r(NULL,NULL)]] ),
				[AC_MSG_RESULT(
				 [ctime_r requires additional compile flags])],
				[AC_MSG_WARN(
				 [Unable to determine how to compile ctime_r])] )] )] )
	AC_LANG_POP(C) ])
])

dnl Function to determine the operating system
AC_DEFUN([LIBEWF_DETERMINE_OPERATING_SYSTEM],
[ac_libewf_target_string="$target";
if test "x$ac_libewf_target_string" = x;
then
	ac_libewf_target_string="$build";
fi
case "$ac_libewf_target_string" in
	*cygwin* )
		ac_libewf_operating_system="Cygwin";
		;;
	*darwin* )
		ac_libewf_operating_system="Darwin";
		;;
	*freebsd* )
		ac_libewf_operating_system="FreeBSD";
		;;
	*netbsd* )
		ac_libewf_operating_system="NetBSD";
		;;
	*openbsd* )
		ac_libewf_operating_system="OpenBSD";
		;;
	*linux* )
		ac_libewf_operating_system="Linux";
		;;
	*mingw* )
		ac_libewf_operating_system="MingW";
		;;
	*solaris* )
		ac_libewf_operating_system="SunOS";
		;;
	* )
		ac_libewf_operating_system="Unknown";
		;;
esac
AC_DEFINE_UNQUOTED(
 LIBEWF_OPERATING_SYSTEM,
 "$ac_libewf_operating_system",
 [Defines the fallback operating system string.])
])

dnl Check for host type
AC_CANONICAL_HOST

dnl Check for large file support
AC_SYS_LARGEFILE

dnl Check for configure arguments
LIBEWF_TEST_ENABLE(
 [wide-character-type],
 [wide_character_type],
 [enable wide character type support],
 [no])
LIBEWF_TEST_ENABLE(
 [raw-access],
 [raw_access],
 [use libewf's raw read and write functionality in the ewf tools],
 [no])
LIBEWF_TEST_ENABLE(
 [low-memory-usage],
 [low_memory_usage],
 [enable low memory usage],
 [no])
LIBEWF_TEST_ENABLE(
 [verbose-output],
 [verbose_output],
 [enable verbose output],
 [no])
LIBEWF_TEST_ENABLE(
 [debug-output],
 [debug_output],
 [enable debug output],
 [no])

dnl Check for libtool DLL support
AC_LIBTOOL_WIN32_DLL

dnl Checks for programs
AC_PROG_CC
AC_PROG_GCC_TRADITIONAL
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)

dnl Check for compiler language support
AC_C_CONST
AC_C_VOLATILE

dnl Checks for libraries and library functions
dnl ac_libewf_dummy is used to prevent AC_CHECK_LIB adding unnecessary -l<library> arguments
AC_CHECK_LIB(
 z,
 adler32,
 [],
 [AC_MSG_FAILURE(
  [Missing function: adler32 in library: zlib.],
  [1])])

AC_CHECK_LIB(
 z,
 compress2,
 [ac_libewf_dummy=yes],
 [AC_MSG_FAILURE(
  [Missing function: compress2 in library: zlib.],
  [1])])

AC_CHECK_LIB(
 z,
 compressBound,
 [AC_DEFINE(
  [HAVE_COMPRESS_BOUND],
  [1],
  [Defines if compressBound funtion is present in zlib.])])

AC_CHECK_LIB(
 z,
 uncompress,
 [ac_libewf_dummy=yes],
 [AC_MSG_FAILURE(
  [Missing function: uncompress in library: zlib.],
  [1])])

AC_CHECK_LIB( crypto, MD5_Init, [], [ ac_libewf_have_libcrypto_md5=no ] )
AC_CHECK_LIB( crypto, MD5_Update, [ ac_libewf_dummy=yes ], [ ac_libewf_have_libcrypto_md5=no ] )
AC_CHECK_LIB( crypto, MD5_Final, [ ac_libewf_dummy=yes ], [ ac_libewf_have_libcrypto_md5=no ] )

AC_CHECK_LIB( crypto, SHA1_Init, [ ac_libewf_dummy=yes ], [ ac_libewf_have_libcrypto_sha1=no ] )
AC_CHECK_LIB( crypto, SHA1_Update, [ ac_libewf_dummy=yes ], [ ac_libewf_have_libcrypto_sha1=no ] )
AC_CHECK_LIB( crypto, SHA1_Final, [ ac_libewf_dummy=yes ], [ ac_libewf_have_libcrypto_sha1=no ] )

AC_CHECK_LIB( crypto, EVP_md5, [ ac_libewf_dummy=yes ], [ ac_libewf_have_libcrypto_evp=no ] )
AC_CHECK_LIB( crypto, EVP_sha1, [ ac_libewf_dummy=yes ], [ ac_libewf_have_libcrypto_evp=no ] )
AC_CHECK_LIB( crypto, EVP_MD_CTX_init, [ ac_libewf_dummy=yes ], [ ac_libewf_have_libcrypto_evp=no ] )
AC_CHECK_LIB( crypto, EVP_MD_CTX_cleanup, [ ac_libewf_dummy=yes ], [ ac_libewf_have_libcrypto_evp=no ] )
AC_CHECK_LIB( crypto, EVP_DigestInit_ex, [ ac_libewf_dummy=yes ], [ ac_libewf_have_libcrypto_evp=no ] )
AC_CHECK_LIB( crypto, EVP_DigestUpdate, [ ac_libewf_dummy=yes ], [ ac_libewf_have_libcrypto_evp=no ] )
AC_CHECK_LIB( crypto, EVP_DigestFinal_ex, [ ac_libewf_dummy=yes ], [ ac_libewf_have_libcrypto_evp=no ] )

AC_CHECK_LIB(
 uuid,
 uuid_generate,
 [],
 [ ac_libewf_have_libuuid=no ])

AC_CHECK_LIB(
 uuid,
 uuid_generate_random,
 [AC_DEFINE(
  [HAVE_UUID_GENERATE_RANDOM],
  [1],
  [Defines if uuid_generate_random funtion is present in libuuid.])])

AC_CHECK_LIB(
 uuid,
 uuid_generate_time,
 [AC_DEFINE(
  [HAVE_UUID_GENERATE_TIME],
  [1],
  [Defines if uuid_generate_time funtion is present in libuuid.])])

dnl Check for headers
AC_CHECK_HEADER(
 [sys/types.h],
 [AC_DEFINE(
  [HAVE_SYS_TYPES_H],
  [1],
  [Define to 1 if you have the <sys/types.h> header file.])
 AC_SUBST(
  [HAVE_SYS_TYPES_H],
  [1])],
 [AC_SUBST(
  [HAVE_SYS_TYPES_H],
  [0])])

AC_CHECK_HEADER(
 [inttypes.h],
 [AC_DEFINE(
  [HAVE_INTTYPES_H],
  [1],
  [Define to 1 if you have the <inttypes.h> header file.])
 AC_SUBST(
  [HAVE_INTTYPES_H],
  [1])],
 [AC_SUBST(
  [HAVE_INTTYPES_H],
  [0])])

AC_CHECK_HEADER(
 [stdint.h],
 [AC_DEFINE(
  [HAVE_STDINT_H],
  [1],
  [Define to 1 if you have the <stdint.h> header file.])
 AC_SUBST(
  [HAVE_STDINT_H],
  [1])],
 [AC_SUBST(
  [HAVE_STDINT_H],
  [0])])

AC_CHECK_HEADERS([cygwin/fs.h])
AC_CHECK_HEADERS([fcntl.h])
AC_CHECK_HEADERS([glob.h])
AC_CHECK_HEADERS([limits.h])
AC_CHECK_HEADERS([linux/fs.h])
AC_CHECK_HEADERS([openssl/opensslv.h])
AC_CHECK_HEADERS([signal.h])
AC_CHECK_HEADERS([stdarg.h])
AC_CHECK_HEADERS([stdlib.h])
AC_CHECK_HEADERS([string.h])
AC_CHECK_HEADERS([sys/disk.h])
AC_CHECK_HEADERS([sys/disklabel.h])
AC_CHECK_HEADERS([sys/ioctl.h])
AC_CHECK_HEADERS([sys/signal.h])
AC_CHECK_HEADERS([sys/utsname.h])
AC_CHECK_HEADERS([unistd.h])
AC_CHECK_HEADERS([varargs.h])
AC_CHECK_HEADERS([zlib.h])

AC_HEADER_STDC

dnl Check for declarations
AC_CHECK_DECLS( memrchr )

dnl Check for type definitions
AC_STRUCT_TM

AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_SIZE_T

AC_CHECK_TYPE(
 [size32_t],
 [AC_SUBST(
  [HAVE_SIZE32_T],
  [1])],
 [AC_SUBST(
  [HAVE_SIZE32_T],
  [0])])

AC_CHECK_TYPE(
 [ssize32_t],
 [AC_SUBST(
  [HAVE_SSIZE32_T],
  [1])],
 [AC_SUBST(
  [HAVE_SSIZE32_T],
  [0])])

AC_CHECK_TYPE(
 [size64_t],
 [AC_SUBST(
  [HAVE_SIZE64_T],
  [1])],
 [AC_SUBST(
  [HAVE_SIZE64_T],
  [0])])

AC_CHECK_TYPE(
 [ssize64_t],
 [AC_SUBST(
  [HAVE_SSIZE64_T],
  [1])],
 [AC_SUBST(
  [HAVE_SSIZE64_T],
  [0])])

AC_CHECK_TYPE(
 [off64_t],
 [AC_SUBST(
  [HAVE_OFF64_T],
  [1])],
 [AC_SUBST(
  [HAVE_OFF64_T],
  [0])])

AC_CHECK_TYPE([ssize_t])
AC_CHECK_TYPE([u64])

AC_CHECK_SIZEOF([off_t])
AC_CHECK_SIZEOF([size_t])

dnl Check for functions
AC_CHECK_FUNCS([atoll])
AC_CHECK_FUNCS([ctime])
AC_CHECK_FUNCS([fgets])
AC_CHECK_FUNCS([getopt])
AC_CHECK_FUNCS([gmtime])
AC_CHECK_FUNCS([gmtime_r])
AC_CHECK_FUNCS([localtime])
AC_CHECK_FUNCS([localtime_r])
AC_CHECK_FUNCS([memchr])
AC_CHECK_FUNCS([memcmp])
AC_CHECK_FUNCS([memcpy])
AC_CHECK_FUNCS([memrchr])
AC_CHECK_FUNCS([memset])
AC_CHECK_FUNCS([mktime])
AC_CHECK_FUNCS([snprintf])
AC_CHECK_FUNCS([sprintf])
AC_CHECK_FUNCS([strchr])
AC_CHECK_FUNCS([strcmp])
AC_CHECK_FUNCS([strcpy])
AC_CHECK_FUNCS([strdup])
AC_CHECK_FUNCS([strerror])
AC_CHECK_FUNCS([strerror_r])
AC_CHECK_FUNCS([strlen])
AC_CHECK_FUNCS([strncmp])
AC_CHECK_FUNCS([strncpy])
AC_CHECK_FUNCS([strrchr])
AC_CHECK_FUNCS([strtoll])
AC_CHECK_FUNCS([strtoull])
AC_CHECK_FUNCS([uname])

AC_FUNC_MEMCMP
AC_FUNC_STRERROR_R
AC_FUNC_VPRINTF

LIBEWF_FUNC_CTIME_R

dnl Check for printf conversion specifier support
LIBEWF_PRINTF_JD
LIBEWF_PRINTF_ZD

dnl Check for enabling libcrypto EVP support
AS_IF(
	[test "x$ac_libewf_have_libcrypto_evp" != xno],
	[ac_libewf_have_libcrypto_evp=no
	 AC_CHECK_HEADER(
	  [openssl/evp.h],
	  [AC_LANG_PUSH(C)
	  AC_MSG_CHECKING(
	   [if openssl/evp.h can be used in combination with zlib.h])
	  AC_LINK_IFELSE(
		AC_LANG_PROGRAM(
		 [[#include <zlib.h>
#include <openssl/evp.h>]],
		 [[ ]]),
		 [AC_MSG_RESULT(
		  [yes])
		 AC_DEFINE(
		  [HAVE_OPENSSL_EVP_H],
		  [1],
		  [Define to 1 if you have the <openssl/evp.h> header file.])
		 AC_SUBST(
		  [HAVE_OPENSSL_EVP_H],
		  [1])
		 AC_MSG_NOTICE(
		  [Support for libcrypto EVP will be build.])
		 ac_libewf_have_libcrypto_evp=yes
		 ac_libewf_have_libcrypto_md5=evp
		 ac_libewf_have_libcrypto_sha1=evp ],
		 [AC_MSG_RESULT(
		  [no]) ])
	  AC_LANG_POP(C)]) ])
AS_IF(
	[test "x$ac_libewf_have_libcrypto_evp" == xno],
	[AC_SUBST(
	 [HAVE_OPENSSL_EVP_H],
	 [0])] )

dnl Check for libcrypto MD5 support
AS_IF(
	[test "x$ac_libewf_have_libcrypto_md5" != xno && test "x$ac_libewf_have_libcrypto_md5" != xevp ],
	[ac_libewf_have_libcrypto_md5=no
	AC_CHECK_HEADERS(
	 [openssl/md5.h],
	 [AC_MSG_NOTICE(
	  [Support for calculating MD5 hashes will be build.])
	  ac_libewf_have_libcrypto_md5=yes ]) ])
AS_IF(
	[test "x$ac_libewf_have_libcrypto_md5" == xno],
	[AC_MSG_NOTICE(
	 [No support for calculating MD5 hashes, if required install (openssl) libcrypto with MD5 support.]) ])

dnl Check for libcrypto SHA1 support
AS_IF(
	[test "x$ac_libewf_have_libcrypto_sha1" != xno && test "x$ac_libewf_have_libcrypto_sha1" != xevp ],
	[ac_libewf_have_libcrypto_sha1=no
	AC_CHECK_HEADERS(
	 [openssl/sha.h],
	 [AC_MSG_NOTICE(
	  [Support for calculating SHA1 hashes will be build.])
	  ac_libewf_have_libcrypto_sha1=yes ]) ])
AS_IF(
	[test "x$ac_libewf_have_libcrypto_sha1" == xno],
	[AC_MSG_NOTICE(
	 [No support for calculating SHA1 hashes, if required install (openssl) libcrypto with SHA1 support.]) ])

dnl Check for enabling libuuid support
AS_IF(
	[test "x$ac_libewf_have_libuuid" != xno],
	[ac_libewf_have_libuuid=no
	AC_CHECK_HEADERS(
	 [uuid/uuid.h],
	 [AC_MSG_NOTICE(
	  [Support for libuuid will be build.])
	 ac_libewf_have_libuuid=yes ]) ])

dnl Check if libewf should be build with wide character type support
AS_IF(
	[test "x$ac_libewf_enable_wide_character_type" != xno ],
	[AC_DEFINE(
	 [HAVE_WIDE_CHARACTER_TYPE],
	 [1],
	 [Defines if wide character type should be used])
	AC_CHECK_FUNCS([btowc])
	AC_CHECK_FUNCS([fgetws])
	AC_CHECK_FUNCS([mbsinit])
	AC_CHECK_FUNCS([mbrtowc])
	AC_CHECK_FUNCS([swprintf])
	AC_CHECK_FUNCS([wmain])
	AC_CHECK_FUNCS([wmemchr])
	AC_CHECK_FUNCS([wmemcmp])
	AC_CHECK_FUNCS([wmemcpy])
	AC_CHECK_FUNCS([wmemrchr])
	AC_CHECK_FUNCS([wctob])
	AC_CHECK_FUNCS([wcschr])
	AC_CHECK_FUNCS([wcscmp])
	AC_CHECK_FUNCS([wcscpy])
	AC_CHECK_FUNCS([wcsdup])
	AC_CHECK_FUNCS([wcslen])
	AC_CHECK_FUNCS([wcsncmp])
	AC_CHECK_FUNCS([wcsncpy])
	AC_CHECK_FUNCS([wcsrchr])
	AC_CHECK_FUNCS([wcrtomb])
	AC_CHECK_FUNCS([wcstoll])
	AC_CHECK_FUNCS([wcstoull])
	AC_CHECK_HEADERS(
	 [wchar.h],
	 [AC_DEFINE(
	  [HAVE_WCHAR_H],
	  [1],
	  [Define to 1 if you have the <wchar.h> header file.])
	 AC_SUBST(
	  [HAVE_WCHAR_H],
	  [1])],
	 [AC_SUBST(
	  [HAVE_WCHAR_H],
	  [0])])
	AC_SUBST(
	 [HAVE_WIDE_CHARACTER_TYPE],
	 [1])
	ac_libewf_enable_wide_character_type=yes],
	[AC_SUBST(
	 [HAVE_WIDE_CHARACTER_TYPE],
	 [0])
	AC_SUBST(
	 [HAVE_WCHAR_H],
	 [0])])

AC_SUBST(
 [HAVE_WIDE_CHARACTER_SUPPORT_FUNCTIONS],
 [0])

dnl Check if ewftools should be build with raw read and write support
AS_IF(
	[test "x$ac_libewf_enable_raw_access" != xno ],
	[AC_DEFINE(
	 [HAVE_RAW_ACCESS],
	 [1],
	 [Defines if libewf's read and write raw functionality should be used in the ewf tools] )
	ac_libewf_enable_raw_access=yes])

dnl Check if libewf should be build with verbose output
AS_IF(
	[test "x$ac_libewf_enable_verbose_output" != xno ],
	[AC_DEFINE(
	 [HAVE_VERBOSE_OUTPUT],
	 [1],
	 [Defines if verbose output should be used] )
	ac_libewf_enable_verbose_output=yes])

dnl Check if libewf should be build with debug output
AS_IF(
	[test "x$ac_libewf_enable_debug_output" != xno ],
	[AC_DEFINE(
	 [HAVE_DEBUG_OUTPUT],
	 [1],
	 [Defines if debug output should be used] )
	ac_libewf_enable_debug_output=yes])

dnl Check for the operation system will be used as a fall back in the ewftools
LIBEWF_DETERMINE_OPERATING_SYSTEM

CFLAGS="$CFLAGS -Wall"

dnl Have configure make the Makefiles
AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([common/Makefile])
AC_CONFIG_FILES([libewf/Makefile])
AC_CONFIG_FILES([ewftools/Makefile])
AC_CONFIG_FILES([manuals/Makefile])
dnl Have configure make the include files
AC_CONFIG_FILES([include/libewf.h])
AC_CONFIG_FILES([include/libewf/definitions.h])
AC_CONFIG_FILES([include/libewf/types.h])
dnl Have configure make distribution specific files
AC_CONFIG_FILES([debian/changelog])
AC_CONFIG_FILES([debian/shlibs.local.ex])
AC_CONFIG_FILES([macosx/Introduction.rtf])
AC_CONFIG_FILES([libewf.pc])
AC_CONFIG_FILES([libewf.spec])
dnl Have configure write its configuration
AC_CONFIG_HEADERS([common/config.h])

AC_OUTPUT

dnl Print a summary
AC_MSG_NOTICE([
Building:
   libcrypto EVP support:                   $ac_libewf_have_libcrypto_evp
   libcrypto MD5 support:                   $ac_libewf_have_libcrypto_md5
   libcrypto SHA1 support:                  $ac_libewf_have_libcrypto_sha1
   libuuid support:                         $ac_libewf_have_libuuid

Features:
   Wide character type support:             $ac_libewf_enable_wide_character_type
   ewftools use raw read and write support: $ac_libewf_enable_raw_access
   Verbose output:                          $ac_libewf_enable_verbose_output
   Debug output:                            $ac_libewf_enable_debug_output
]);

