= EWF specification
Expert Witness Compression Format specification

:toc:
:toc-placement: manual
:toc-title: 
:toclevels: 4

:numbered!:
[abstract]
== Summary
EWF is short for Expert Witness Compression Format, according to `[ASR02]`. It is 
a file type used to store media images for forensic purposes. It is currently 
widely used in the field of computer forensics in proprietary tooling like 
EnCase en FTK. The original specification of the format is provided by ASRDATA, 
for the SMART application.

The EWF format was succeeded by the Expert Witness Compression Format version 2 
in EnCase 7 (EWF2-Ex01 and EWF2-Lx01). EnCase 7 also uses a different version 
of EWF-L01 then its predecessors.

This document is intended as a working document for the EWF specification. 
Which should allow existing Open Source forensic tooling to be able to process 
this file type.

[preface]
== Document information
[cols="1,5"]
|===
| Author(s): | Joachim Metz <joachim.metz@gmail.com>
| Abstract: | This document contains the EWF file format specification.
| Classification: | Public
| Keywords: | Expert Witness Compression Format, EWF, EnCase file format, SMART
|===

[preface]
== License
....
Copyright (C) 2006-2015, Joachim Metz <joachim.metz@gmail.com>.
Permission is granted to copy, distribute and/or modify this document under the 
terms of the GNU Free Documentation License, Version 1.3 or any later version 
published by the Free Software Foundation; with no Invariant Sections, no 
Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included 
in the section entitled "GNU Free Documentation License".
....

[preface]
== Table of contents
toc::[]

[preface]
== Revision history
[cols="1,1,1,5",options="header"]
|===
| Version | Author | Date | Comments
| 0.0.1 | J.B. Metz | March 2006 | Initial version
| 0.0.2 | J.B. Metz | March 2006 | Additional information.
| 0.0.3 | J.B. Metz | March 2006 | Additional information.
| 0.0.4 | J.B. Metz | March 2006 | Additional information.
| 0.0.5 | J.B. Metz | March 2006 | Additional information, regarding data and header2 section.
| 0.0.6 | J.B. Metz | March 2006 | Additional information, regarding data and header2 section.
| 0.0.7 | J.B. Metz | March 2006 | Additional information, regarding data, hash and header2 section.
| 0.0.8 | J.B. Metz | March 2006 | Additional information, regarding data section.
| 0.0.9 | J.B. Metz | March 2006 | Additional information, regarding chunk and compression, offset array CRC and error2 section.
| 0.0.10 | J.B. Metz | March 2006 | Correction regarding EnCase 3 and compression MSB.
| 0.0.11 | J.B. Metz | March 2006 | Additions regarding EnCase 2.
| 0.0.12 | J.B. Metz | March 2006 | Small changes regarding unknown in volume and data. Removed some spelling errors. Added the information regarding when a chunk is compressed or not.
| 0.0.13 | J.B. Metz | April 2006 | Additions regarding EnCase 1.
| 0.0.14 | J.B. Metz | April 2006 | Additions regarding byte order.
| 0.0.15 | J.B. Metz | April 2006 | Additions regarding disk section.
| 0.0.16 | J.B. Metz | April 2006 | Small adjustments regarding header section.
| 0.0.17 | J.B. Metz | April 2006 | Adjustments in error2 section information.
| 0.0.18 | J.B. Metz | May 2006 | Adjustments in hash section information.
| 0.0.19 | J.B. Metz | August 2006 | Fixed error in Encase 4 header2 layout information.
| 0.0.20 | J.B. Metz | August 2006 | Added information regarding SMART format generated by FTK Imager. Corrected error about gzip compression in header section.
| 0.0.21 | J.B. Metz | August 2006 | Added information regarding SMART format generated by FTK Imager.
| 0.0.22 | J.B. Metz | August 2006 | Added information about segment file extension naming.
| 0.0.23 | J.B. Metz | September 2006 | Added information about EWF-L01 (LVF) format.
| 0.0.24 | J.B. Metz | September 2006 | Added information from EWF-L01 analysis.
| 0.0.25 | J.B. Metz | September 2006 | Changes after comments by Guy Voncken.
| 0.0.26 | J.B. Metz | October 2006 | Corrected error regarding EnCase 1 and SMART header specification.
| 0.0.27 | J.B. Metz | October 2006 | Added theoretical maximum media size.
| 0.0.28 | J.B. Metz | October 2006 | Additional information about section start size in EnCase (EWF-E01) next and done sections.
| 0.0.29 | J.B. Metz | November 2006 | Additional information about CRC algorithm.
| 0.0.30 | J.B. Metz | November 2006 | Fixed error regarding the location of the actual chunks in the EnCase 1 format, which actually is the table sections and not the sectors section.
| 0.0.31 | J.B. Metz | November 2006 | Additional information about the EnCase linen 5 (EWF-E01) format.
| 0.0.32 | J.B. Metz | December 2006 | Additional information about GUID.
| 0.0.33 | J.B. Metz | December 2006 | Corrected error regarding header sections in EnCase 1 format.
| 0.0.34 | J.B. Metz | December 2006 | Added new information regarding the table section after encountering a bug in FTK for EWF files with more than 16 * 1024 offset table entries.
| 0.0.35 | J.B. Metz | December 2006 | Corrected misinterpretation of original specifications, regarding additional table sections.
| 0.0.36 | J.B. Metz | January 2007 | Added information about EnCase 6.
| 0.0.37 | J.B. Metz | January 2007 | Added information about linen 6.
| 0.0.38 | J.B. Metz | January 2007 | Added information about EnCase6/linen6 header. +
Adjustments regarding media type and media flags.
| 0.0.39 | J.B. Metz | January 2007 | Added information about header values.
| 0.0.40 | J.B. Metz | January 2007 | Added information about EWF-X
| 0.0.41 | J.B. Metz | August 2007 | Added information about EnCase 6.7 >2Gb segment file support.
| 0.0.42 | J.B. Metz | August 2007 | Added information about EnCase 6.7 >2Gb segment file support and CD/DVD image session sector.
| 0.0.43 | J.B. Metz | September 2007 | Added information about EnCase 6.7 >2Gb segment file support.
| 0.0.44 | J.B. Metz | September 2007 | Added page numbers.
| 0.0.45 | J.B. Metz | November 2007 | Added information about session section.
| 0.0.46 | J.B. Metz | March 2008 | Added information about session section.
| 0.0.47 | J.B. Metz | March 2008 | Added information about EnCase 6 >2GiB segment file format.
| 0.0.48 | J.B. Metz | June 2008 | Textual corrections.
| 0.0.49 | J.B. Metz | June 2008 | Added information about EnCase 6.11 winen file format.
| 0.0.50 | J.B. Metz | February 2009 | Added information about EnCase 6.12 SHA1 hash support and header values.
| 0.0.51 | J.B. Metz | April 2009 | Added information about EnCase software version header value limitation.
| 0.0.52 | J.B. Metz | April 2009 | Added information about EnCase 6.13 Tableau write blocker support.
| 0.0.53 | J.B. Metz | November 2009 | Small changes.
| 0.0.54 | J.B. Metz | December 2009 +
January 2010 | Added information about ltree section.
| 0.0.55 | J.B. Metz | January 2010 | Update for linen 6.12 and later.
| 0.0.56 | J.B. Metz | May 2010 | Corrected amount of into number of. +
Email change
| 0.0.57 | J.B. Metz | September 2010 | Minor changes.
| 0.0.58 | J.B. Metz | September 2010 | Changed CRC to checksum.
| 0.0.59 | J.B. Metz | October 2010 | Additional session section information with thanks to M. Nohr +
Updated some tables to the newer format. +
Minor changes.
| 0.0.60 | J.B. Metz | November 2010 | Minor changes and improvements with thanks to G. Voncken. +
Updated some tables to the newer format.
| 0.0.61 | J.B. Metz | December 2010 | License version update +
Additional information about optical discs. +
Additional information about AD encryption.
| 0.0.62 | J.B. Metz | January 2011 | Minor changes
| 0.0.63 | J.B. Metz | February 2011 | Additional audio tracks information with thanks to M. Nohr
| 0.0.64 | J.B. Metz | May 2011 | Changes to FTK imager format
| 0.0.65 | J.B. Metz | June 2011 | Updated Logical File Evidence (LVF) format flag information with thanks to B. Baron.
| 0.0.66 | J.B. Metz | September 2011 | Updated Logical File Evidence (LVF) format flag information with thanks to N. Harris
| 0.0.67 | J.B. Metz | December 2011 | Small refinement in compressed vs uncompressed chunk data.
| 0.0.68 | J.B. Metz | February 2012 | Added information about EnCase header values limitations thanks to G. Voncken.
| 0.0.69 | J.B. Metz | June 2012 | Added information about EnCase 6.19 and 7, EWF-E01 and EWF-L01 format. Email change; text clean up; some corrections and additions.
| 0.0.70 | J.B. Metz | July 2012 | Changes to match EWF version 2 documentation.
| 0.0.71 | J.B. Metz | July 2012 | Updates regarding ltree header.
| 0.0.72 | J.B. Metz | July 2012 | Updates files created by Expert Witness 1.35 (for Windows). +
Other small corrections.
| 0.0.73 | J.B. Metz | August 2012 | Updates regarding ltree header.
| 0.0.74 | J.B. Metz | August 2012 | Updates regarding incomplete section and corruption scenarios with thanks to B. Johnson for pointing out the dual image scenario.
| 0.0.75 | J.B. Metz | September 2012 | Additional information regarding L01 map entry.
| 0.0.76 | J.B. Metz | January 2013 | Corrected some typos, thanks to A. Bridge for pointing these out.
| 0.0.77 | J.B. Metz | March 2013 | Additional information regarding Logicube created E01 files with thanks to D. Kovar and Digital Assembly LLC.
| 0.0.78 | J.B. Metz | March 2013 | Improved description of zlib compressed data format (RFC1950) and deflate compression (RFC1951). +
Updated the information regarding Logicube products and the data section checksum behavior.
| 0.0.79 | J.B. Metz | August 2015 | Switched to asciidoc format.
|===

:numbered:
== Overview
The Expert Witness Compression Format (EWF) is used to store media images. It 
allows to store disk and partition images, compressed or non-compressed. EWF 
can store a single image in one or more segment files. Each segment file 
consist of a standard header, followed by multiple sections. A single section 
cannot span multiple files. Sections are arranged back-to-back.

Specifications:

* In this document when referred to the EWF format it refers to the original specification by `[ASR02]`. The newer formats like that of EnCase are deducted from the original specification and will be referred to as the EWF-E01, because of the default file extension. Whereas the Logical File Evidence (LVF) format introduced in EnCase 5, which is also stored in the EWF format will be referred to as EWF-L01. The SMART format is viewed separately to allow for discussion if the implementation differs from the specification by `[ASR02]` and will be referred to as the EWF-S01, because of the default file extension.
* All offsets are relative to the beginning of an individual section, unless otherwise noted. EnCase allows a maximum size of a segment file to be 2000 MiB. This has to do with the size of the offset of the chunk of media data. This is a 32 bit value where the most significant bit (MSB) is used as a compression flag. Therefore the maximum offset size (31 bit) can address about 2048 MiB. In EnCase 6.7 an addition was made to the table value to provide for a base offset to allow for segment files greater than 2048 MiB.
* A chunk is defined as the sector size (per default 512 bytes) multiplied by the block size, the number of sectors per chunk (block) (per default 64 sectors). The data within the EWF format is stored in little-endian. The terms block and chunk are used intermittently.

=== Test version
The following version of programs were used to test the information within this document:

* FTK Imager 2.3, 2.4, 2.51, 2.9, 3.0 (Windows)
* Expert Witness 1.35 (for Windows) (EnCase 1.35)
* EnCase 1.99l (Windows)
* EnCase 2.17a (DOS)
* EnCase 3.21b (Windows)
* EnCase 4.22 (Windows)
* EnCase 5.04a, 5.05 (Windows)
* EnCase 6.1, 6.7, 6.8, 6.10, 6.11, 6.12, 6.13, 6.14, 6.19 (Windows)
* EnCase 7.04 (Windows)
* Linen 5 (Linux)
* Linen 6.01, 6.19 (Linux)
* Linen 7.01 (Linux)

EnCase 7 no longer provides the fast and best compression options.

== Segment file
EWF stores data in one or more segment files (or segments). Each segment file 
consists of:

* A file header.
* One or more sections.

=== File header
Each segment file starts with a file header.

`[ASR02]` defines that the file header consists of 2 parts, namely:

* a signature part
* fields part

==== EWF, EWF-E01 and EWF-S01
This is file header is defined by [ASR02] and both used by the EWF-E01 and 
EWF-S01 formats.

The file header is 13 bytes of size and consists 

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | Signature +
"EVF\x09\x0d\x0a\xff\x00" 
| 8 | 1 | 0x01 | Start of fields
| 9 | 2 | | Segment number +
Must be 1 or higher
| 11 | 2 | 0x0000 | End of fields
|===

Segment number contains a number which refers to the number of the segment 
file, starting with 1 for the first file.

[NOTE]
This means there could only be a maximum of 65535 (0xffff) files, if it is an 
unsigned value.

==== EWF-L01
This is file header is used by the EWF-L01 format.

The file header is 13 bytes of size and consists 

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | Signature +
"LVF\x09\x0d\x0a\xff\x00" 
| 8 | 1 | 0x01 | Start of fields
| 9 | 2 | | Segment number +
Must be 1 or higher
| 11 | 2 | 0x0000 | End of fields
|===

Segment number contains a number which refers to the number of the segment 
file, starting with 1 for the first file.

[NOTE]
This means there could only be a maximum of 65535 (0xffff) files, if it is an 
unsigned value.

=== Segment file extensions
Both the SMART (EWF-S01) and the EWF-E01 use a different approach for naming 
the segment files.

==== EWF-S01
The EWF-S01 extension naming has two distinct parts.

* The first segment file has the extension '.s01'.
** The next segment file has the extension '.s02.
** This will continue up to '.s99'.
* After which the next segment file has the extension '.saa'.
** The next segment file has the extension '.sab'.
** This will continue up to '.saz'.
** The next segment file has the extension '.sba'.
** This will continue up to '.szz'.
** The next segment file has the extension '.faa'.
** This will continue up to '.zzz'. ([yellow-background]*verify this; and then ?*)
** [yellow-background]*It will even continue to the use the extensions '.{aa'. (not confirmed)*

libewf supports extensions up to .zzz

==== EWF-E01
The EWF-E01 extension naming has two distinct parts.

* The first segment file has the extension '.E01'.
** The next segment file has the extension '.E02.
** This will continue up to '.E99'.
* After which the next segment file has the extension '.EAA'.
** The next segment file has the extension '.EAB'.
** This will continue up to '.EAZ'.
** The next segment file has the extension '.EBA'.
** This will continue up to '.EZZ'.
** The next segment file has the extension '.FAA'.
** This will continue up to '.ZZZ'. ([yellow-background]*verify this; and then ?*)
** [yellow-background]*It will even continue to the use the extensions '.[AA'. (not confirmed)*

libewf supports extensions up to .ZZZ

==== EWF-L01
The EWF-L01 extension naming has two distinct parts.

* The first segment file has the extension '.L01'.
** The next segment file has the extension '.L02.
** This will continue up to '.L99'.
* After which the next segment file has the extension '.LAA'.
** The next segment file has the extension '.LAB'.
** This will continue up to '.LAZ'.
** The next segment file has the extension '.LBA'.
** This will continue up to '.LZZ'.
** The next segment file has the extension '.MAA'.
** This will continue up to '.ZZZ'. ([yellow-background]*verify this; and then ?*)
** [yellow-background]*It will even continue to the use the extensions '.[AA'. (not confirmed)*

libewf supports extensions up to .ZZZ

=== Segment file set identifier GUID
Segment file sets do not have a strict unique identifier. However the 
<<volume_section,volume section>> contains a GUID that can be used for this 
purpose. Where:

* linen 5 to 6 use a time and MAC address based version (1) of the GUID
* EnCase 5 to 7 and linen 6 to 7 use a random based version (4) of the GUID

[yellow-background]*In linen 6 the switch from a version 1 to 4 GUID was 
somewhere made between version 6.01 and 6.19.*

See RFC4122 for more information about the different GUID versions.

== The sections
The remainder of the segment file consists of sections. Every section starts 
with the same data this will be referred to as the section descriptor 
(previously referred to as section start). The section descriptor could also be 
referred as the section header, but this allows for unnecessary confusion with 
the header section.

=== Section descriptor
The section descriptor consist of 76 bytes, it contains information about a 
specific section.

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 16 | | A string containing the section type definition. +
E.g. "header", "volume", etc.
| 16 | 8 | | Next section offset +
The offset is relative from the start of the segment file
| 24 | 8 | | Section size
| 32 | 40 | 0x00 | Padding
| 72 | 4 | | Checksum +
Adler-32 of all the previous data within the section descriptor.
|===

Some sections contain additional data, refer to paragraph section types for 
more information.

[NOTE]
In EnCase 2 DOS version the padding itself does not contains zero byte values 
but data, probably the memory is not wiped.

[NOTE]
Expert Witness 1.35 (for Windows) does not set the section size.

=== Section types
There are multiple section types. `[ASR02]` defines the following:

* Header section
* Volume section
* Table section
* Next and Done section

Looking at more recent EnCase file (EWF-E01) formats and `[COH]` additional 
section types were found:

* Header2 section
* Disk section
* Sectors section
* Table2 section
* Data section
* Errors2 section
* Session section
* Hash section
* Digest section

Looking at the more recent EnCase file (EWF-L01) format additional section 
types were found:

* Ltree section
* Ltypes section

=== Header2 section

[yellow-background]*TODO migrate remaining documentation*

=== [[volume_section]]Volume section

[yellow-background]*TODO migrate remaining documentation*

== EWF-X
EWF-X (extended) is an experimental format to enhance the EWF format. EWF-X is 
based on the EWF-E01 format. EWF-X does not limit the table entries to 16375. 
EWF-X is not the same as version 2 of EWF.

[yellow-background]*TODO add note about the table entry limit.*

=== Sections
Additional sections provided in the EWF-X format are:

* xheader
* xhash

==== Xheader
The xheader section contains a zlib compressed data (see section:  
3 Compression) containing XML data containing the header values.
....
<?xml version="1.0" encoding="UTF-8"?>
<xheader>
        <case_number>1</case_number>
        <description>Description</description>
        <examiner_name>John D.</examiner_name>
        <evidence_number>1.1</evidence_number>
        <notes>Just a floppy in my system</notes>
        <acquiry_operating_system>Linux</acquiry_operating_system>
        <acquiry_date>Sat Jan 20 18:32:08 2007 CET</acquiry_date>
        <acquiry_software>ewfacquire</acquiry_software>
        <acquiry_software_version>20070120</acquiry_software_version>
</xheader>
....

==== Xhash
The xhash section contains a zlib compressed data (see section:  3 Compression) 
containing XML data containing the hash values.
....
<?xml version="1.0" encoding="UTF-8"?>
<xhash>
        <MD5>ae1ce8f5ac079d3ee93f97fe3792bda3</MD5>
        <SHA1>31a58f090460b92220d724b28eeb2838a1df6184</SHA1>
</xhash>
....

=== GUID
EWF-X uses a random based version of the GUID

== [[compression]]Compression
=== Zlib compressed data
The compressed data is stored in the the zlib compressed data format (RFC1950). 
This format uses big-endian.

The compressed data is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0.0 | 4 bits | | Compression method
| 0.4 | 4 bits | | Compression information
| 1.0 | 5 bits | | Check bits
| 1.5 | 1 bit | | Preset dictionary flag
| 1.6 | 2 bits | | Compression level
4+| _If the preset dictionary flag is set_
| 2 | 4 | | Preset dictionary identifier +
Adler-32 used to identifier the preset dictionary
4+| _Common_
| ...  | ...  | | Compressed chunk data
| ...  | 4 | | Checksum +
Adler-32 of the chunk data
|===

The check bits value must be such that when the first 2 bytes are represented 
as a 16-bit unsigned integer in big-endian byte order the value is a multiple 
of 31.

==== Compression method

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 8 | | Deflate (RFC1951)
| | | 
| 15 | | Reserved
|===

`[RFC1950]` only defines 8 as a valid compression method.

==== Compression information - compression method 8 (Deflate)
For compression method 8 (Deflate) the compression information contains the 
base-2 logarithm of the LZ77 window size minus 8.

To determine the corresponding window size:
....
1 << ( 7 + 8 )
....

E.g. A compression information value of 7 indicates a 32768 bytes window size. 
Values larger than 7 are not allowed according to `[RFC1950]` and thus the 
maximum windows size is 32768 bytes.

==== Compression level

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 0 | | Fastest
| 1 | | Fast
| 2 | | Default
| 3 | | Slowest, maximum compression
|===

=== Deflate compression
The deflate compressed data consists of one or more deflate compressed blocks. 
Each block consists of:

* block header
* block data

==== Deflate compressed block header
The deflate compressed block header is 3 bits in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 1 bit | | Last block (in stream) marker: +
0 => not last block +
1 => last block
| 0.1 | 2 bits | | Block type
|===

==== Deflate compressed block types

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 0 | | uncompressed data
| 1 | | static Huffman compressed data
| 2 | | dynamic Huffman compressed data
| 3 | | reserved (not used)
|===

==== Uncompressed block data

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0.3 | 5 bits | | Empty values (not used)
| 1 | 2 | | Uncompressed data size
| 3 | 2 | | Copy of uncompressed data size +
Contains a 1s complement of the uncompressed data size
| 5 | ...  | | Uncompressed data
|===

The uncompressed data size can range between 0 and 65535 bytes.

==== Huffman compressed block data
[yellow-background]*TODO add description*

Compressed data blocks consists of 3 types of symbols:

* literal byte values
* end-of-block marker
* (size, offset) tuples

These symbols are merged in a single "alphabet" where:

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 0x00 - 0xff | | literal byte values
| 0x100 | | end-of-block marker
3+| _0 additional bits_
| 0x101 | | Size of 3
| 0x102 | | Size of 4
| 0x103 | | Size of 5
| 0x104 | | Size of 6
| 0x105 | | Size of 7
| 0x106 | | Size of 8
| 0x107 | | Size of 9
| 0x108 | | Size of 10
3+| _1 additional bit_
| 0x109 | | Size of [11, 12]
| 0x10a | | Size of [13, 14]
| 0x10b | | Size of [15, 16]
| 0x10c | | Size of [17, 18]
3+| _2 additional bits_
| 0x10d | | Size of [19, 22]
| 0x10e | | Size of [23, 26]
| 0x10f | | Size of [27, 30]
| 0x110 | | Size of [31, 34]
3+| _3 additional bits_
| 0x111 | | Size of [35, 42]
| 0x112 | | Size of [43, 50]
| 0x113 | | Size of [51, 58]
| 0x114 | | Size of [59, 66]
3+| _4 additional bits_
| 0x115 | | Size of [67, 82]
| 0x116 | | Size of [83, 98]
| 0x117 | | Size of [99, 114]
| 0x118 | | Size of [115, 130]
3+| _5 additional bits_
| 0x119 | | Size of [131, 162]
| 0x11a | | Size of [163, 194]
| 0x11b | | Size of [195, 226]
| 0x11c | | Size of [227, 257]
3+| _0 additional bits_
| 0x11d | | Size of 258
|===

The additional bits are stored in big-endian (MSB first) and indicate the index 
into the corresponding array of size values (or base size + additional size).

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
3+| _0 additional bits_
| 0 | | Offset of 1
| 1 | | Offset of 2
| 2 | | Offset of 3
| 3 | | Offset of 4
3+| _1 additional bit_
| | |
|===

[yellow-background]*TODO merge with table*
....
             Extra           Extra               Extra
             Code Bits Dist  Code Bits   Dist     Code Bits Distance
             ---- ---- ----  ---- ----  ------    ---- ---- --------
               4   1   5,6    14   6    129-192   24   11   4097-6144
               5   1   7,8    15   6    193-256   25   11   6145-8192
               6   2   9-12   16   7    257-384   26   12  8193-12288
               7   2  13-16   17   7    385-512   27   12 12289-16384
               8   3  17-24   18   8    513-768   28   13 16385-24576
               9   3  25-32   19   8   769-1024   29   13 24577-32768
10   4     33-48    20    9   1025-1536
11   4     49-64    21    9   1537-2048
12   5     65-96    22   10   2049-3072
13   5     97-128   23   10   3073-4096
....

==== Dynamic Huffman compressed block data

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0.3 | | | Code size
| | | | Distance code
|===

[yellow-background]*TODO merge with table*
....
               5 Bits: HLIT, # of Literal/Length codes - 257 (257 - 286)
               5 Bits: HDIST, # of Distance codes - 1        (1 - 32)
               4 Bits: HCLEN, # of Code Length codes - 4     (4 - 19)
 (HCLEN + 4) x 3 bits: code lengths for the code length
                  alphabet given just above, in the order: 16, 17, 18,
                  0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15

                  These code lengths are interpreted as 3-bit integers
                  (0-7); as above, a code length of 0 means the
                  corresponding symbol (literal/length or distance code
                  length) is not used.

               HLIT + 257 code lengths for the literal/length alphabet,
                  encoded using the code length Huffman code

               HDIST + 1 code lengths for the distance alphabet,
                  encoded using the code length Huffman code

               The actual compressed data of the block,
                  encoded using the literal/length and distance Huffman
                  codes

               The literal/length symbol 256 (end of data),
                  encoded using the literal/length Huffman code

         The code length repeat codes can cross from HLIT + 257 to the
         HDIST + 1 code lengths.  In other words, all code lengths form
         a single sequence of HLIT + HDIST + 258 values.
....

The code size is encoded in the following Huffman encoding:

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 0 - 15 | | Represent code size of 0 - 15
| 16 | | Copy the previous code size 3 - 6 times. +
The next 2 bits indicate repeat length (0 = 3, ... , 3 = 6) +
Example: Codes 8, 16 (+2 bits 11), 16 (+2 bits 10) will expand to 12 code lengths of 8 (1 + 6 + 5)
| 17 | | Repeat a code length of 0 for 3 - 10 times. (3 bits of length)
| 18 | | Repeat a code length of 0 for 11 - 138 times (7 bits of length)
|===

A code size of 0 indicates that the corresponding symbol in the literal/length 
or distance alphabet will not occur in the block, and should not participate in 
the Huffman code.

==== Decompression
[yellow-background]*TODO add description*
....
do
{
    read block_header from input stream

    if( block_header.type == UNCOMPRESSED )
    {
        align with next byte
        read block_header.size and block_header.size_copy
        read data of block_header.size
    }
    else
    {
        if( block_header.type == HUFFMANN_DYNAMIC )
        {
            read representation of code trees (see subsection below)
        }
        loop (until end of block code recognized)
        {
            decode literal/length value from input stream
            if( value < 256 )
            {
                copy value (literal byte) to output stream
            }
            else
            {
                if value = end of block (256)
                {
                    break from loop
                }
                else (value = 257..285)
                {
                    decode distance from input stream

                    move backwards distance bytes in the output
                    stream, and copy length bytes from this
                    position to the output stream.
                }
            }
        }
    }
}
while( block_header.last_block_flag == 0 );
....

=== Adler-32 checksum
The checksum algorithm provided by `[ASR02]`, slightly altered for readability. 
The algorithm used is Alder-32 and `[ASR02]` incorrectly refers to it as a CRC.

....
uint32_t Expert_Witness_Compression_CRC(
          uint8_t *buffer,
          size_t buffer_size,
          uint32_t previous_key )
{
	size_t buffer_iterator = 0;
	uint32_t lower_word    = previous_key & 0xffff;
	uint32_t upper_word    = ( previous_key >> 16 ) & 0xffff;

	for( buffer_iterator = 0;
	     buffer_iterator < buffer_size;
	     buffer_iterator++ )
	{
		lower_word += buffer[ buffer_iterator ];
		upper_word += lower_word;

		if( ( buffer_iterator != 0 )
		 && ( ( buffer_iterator % 0x15b0 == 0 )
		  || ( buffer_iterator == buffer_size - 1 ) ) )
		{
			lower_word = lower_word % 0xfff1;
			upper_word = upper_word % 0xfff1;
		}
	}
	return( ( upper_word << 16 ) | lower_word );
}
....

Zlib provides the function adler32 which is an optimized version of the 
algorithm.

== Corruption scenarios
This chapter contains several corruption scenarios that have been encountered 
"in the wild".

=== Corrupt uncompressed chunk
[yellow-background]*TODO add description*

=== Corrupt compressed chunk
[yellow-background]*TODO add description*

=== Corrupt section descriptor
[yellow-background]*TODO add description*

....
libewf_section_start_read: reading section start from file IO pool entry: 1 at offset: 415912423
libewf_section_start_read: type                      : table2
libewf_section_start_read: next offset               : 415978027
libewf_section_start_read: size                      : 65604
libewf_section_start_read: checksum                  : 0xf35f03e0
libewf_section_table_header_read: number of offsets  : 16375
libewf_section_table_header_read: base offset        : 0x00000000
libewf_section_table_header_read: checksum           : 0x180d0137

libewf_section_start_read: reading section start from file IO pool entry: 1 at offset: 415978027
libewf_section_start_read: type                      : sectors
libewf_section_start_read: next offset               : 415978027
libewf_section_start_read: size                      : 0
libewf_section_start_read: checksum                  : 0x1ad00464
....

=== Corrupt table section
[yellow-background]*TODO add description*

[yellow-background]*with and with out table 2*

[yellow-background]*number of entries*

[yellow-background]*entry data*

=== Corrupted segment file header
[yellow-background]*TODO add description*

=== Partial segment file
[yellow-background]*TODO add description*

=== Missing segment file(s)
[yellow-background]*TODO add description*

=== Dual image: section size versus offset
The sections descriptors define both the next section offset and the size of 
the section. If an implementation reads only one of the two to determine the 
next section, a dual EWF image can be crafted that consists of two separate 
images including hashes.

A current version of libewf will mark such an image as corrupted, but older 
versions only checked the section size and will show one of the two valid 
images.

=== Table entries offset overflow
In EnCase 6.7.1 the sectors section can be larger than 2048 MiB. The table 
entries offsets are 31 bit values in EnCase6 the offset in a table entry value 
will actually use the full 32 bit if the 2048 MiB has been exceeded. This 
behavior is no longer present in EnCase 6.8 so it is assumed to be a bug.

Libewf currently assumes that the if the 31 bit value overflows the following 
chunks are uncompressed. This allows EnCase 6.7.1 faulty EWF files to be 
converted by libewf.

=== Multiple incomplete segment file set identifiers
Although rare it can occur that a set of EWF image files changes its segment 
file set identifier. This was seen in an image created by EnCase 6.13, 
presumably using remote imaging. The image contained 3 different segment file 
set identifiers. The first changes after an incomplete section. The second one 
changed without any clear indication. The corresponding data section also 
changed in some extent e.g. compression method and media flags, the is physical 
flag being dropped. The change was consistent across multiple segment files. It 
is unlikely that deliberate manipulation is involved. EnCase considers the 
image as invalid.

Although with some tweaking of libewf the individual segment file sets could be 
read. In this case the data read from the segment file sets was heavily 
corrupted. For now a stock libewf does not support reading multiple segment 
files sets from a single image, but this might change in the future.

=== Notes
[yellow-background]*TODO add description*
[yellow-background]*metadata (volume, data, headers)*

== AD encryption
As of version 2.8 FTK Imager supports "AD encryption". Although the output file 
uses the EWF extensions the file actually is a AES-256 encrypted container. The 
EWF can be encrypted using a pass-phrase or a certificate.

== Notes
What about:

* PALM volume
* the SMART logs

=== AD encryption
The container probably consists of a 512 byte header followed by the encrypted data.

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | File signature +
"ADCRYPT\x00"
| 8 | 4 | 0x01 | [yellow-background]*Unknown (Version)*
| 12 | 4 | 0x0200 | Data offset
| 16 | 8 | | [yellow-background]*Unknown (0x0000ffffffffffff)*
| 24 | 4 | 0x03 | [yellow-background]*Unknown*
| 28 | 4 | 0x02 | [yellow-background]*Unknown*
| 32 | 4 | | [yellow-background]*Unknown*
| 36 | 4 | 0x10 | [yellow-background]*Unknown*
| 40 | 4 | 0x20 | [yellow-background]*Unknown*
| 44 | 4 | 0x40 | [yellow-background]*Unknown*
| 58 | 112 | | [yellow-background]*Unknown key data*
| 170 | 342 | | [yellow-background]*Unknown (empty data)*
|===

=== Header
[yellow-background]*All test headers consist of the where spaces are actually 
tabs separated values*

....
srce
0       1
p       n       id      ev      tb      lo      po      ah      gu      aq
0       0
                                        -1      -1

sub
0       1
p       n       id      nu      co      gu
0       0
                                1
....

=== Ltree
When p = 0 n contains a numeric value ([yellow-background]*the number of child entries of the following entry*)
When p = 1 n contains the name of the directory.
When p = is empty n contains the name of the file.

:numbered!:
[appendix]
== References

`[ASR02]`

[cols="1,5",options="header"]
|===
| Title: | ASR Expert Witness Compression Format specification
| Author(s) | Andrew Rosen
| URL: | http://www.asrdata.com/SMART/whitepaper.html
|===

`[COH]`

[cols="1,5",options="header"]
|===
| Title: | PyFlag libevf source code
| Author(s) | Michael Cohen
| URL: | http://www.pyflag.net/
|===

`[FWIKI]`

[cols="1,5",options="header"]
|===
| Title: | Forensic Wiki
| URL: | http://www.forensicswiki.org/index.php/Forensic_file_formats +
http://www.forensicswiki.org/index.php/EnCase
|===

`[RFC1950]`

[cols="1,5",options="header"]
|===
| Title: | ZLIB Compressed Data Format Specification
| Version: | 3.3
| Author(s): | P. Deutsch, J-L. Gailly
| Date: | May 1996
| URL: | http://www.ietf.org/rfc/rfc1950.txt
|===

`[RFC1951]`

[cols="1,5",options="header"]
|===
| Title: | DEFLATE Compressed Data Format Specification
| Version: | 1.3
| Author(s): | P. Deutsch
| Date: | May 1996
| URL: | http://www.ietf.org/rfc/rfc1951.txt
|===

`[RFC4122]`

[cols="1,5",options="header"]
|===
| Title: | A Universally Unique Identifier (UUID) URN Namespace
| Author(s): | P. Leach, M. Mealling, R. Salz
| Date: | July 2005
| URL: | http://www.ietf.org/rfc/rfc4122.txt
|===

[appendix]
== GNU Free Documentation License
Version 1.3, 3 November 2008
Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc. 
<http://fsf.org/>

Everyone is permitted to copy and distribute verbatim copies of this license 
document, but changing it is not allowed.

=== 0. PREAMBLE
The purpose of this License is to make a manual, textbook, or other functional 
and useful document "free" in the sense of freedom: to assure everyone the 
effective freedom to copy and redistribute it, with or without modifying it, 
either commercially or noncommercially. Secondarily, this License preserves for 
the author and publisher a way to get credit for their work, while not being 
considered responsible for modifications made by others.

This License is a kind of "copyleft", which means that derivative works of the 
document must themselves be free in the same sense. It complements the GNU 
General Public License, which is a copyleft license designed for free software.

We have designed this License in order to use it for manuals for free software, 
because free software needs free documentation: a free program should come with 
manuals providing the same freedoms that the software does. But this License is 
not limited to software manuals; it can be used for any textual work, 
regardless of subject matter or whether it is published as a printed book. We 
recommend this License principally for works whose purpose is instruction or 
reference.

=== 1. APPLICABILITY AND DEFINITIONS
This License applies to any manual or other work, in any medium, that contains 
a notice placed by the copyright holder saying it can be distributed under the 
terms of this License. Such a notice grants a world-wide, royalty-free license, 
unlimited in duration, to use that work under the conditions stated herein. The 
"Document", below, refers to any such manual or work. Any member of the public 
is a licensee, and is addressed as "you". You accept the license if you copy, 
modify or distribute the work in a way requiring permission under copyright law.

A "Modified Version" of the Document means any work containing the Document or 
a portion of it, either copied verbatim, or with modifications and/or 
translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of the 
Document that deals exclusively with the relationship of the publishers or 
authors of the Document to the Document's overall subject (or to related 
matters) and contains nothing that could fall directly within that overall 
subject. (Thus, if the Document is in part a textbook of mathematics, a 
Secondary Section may not explain any mathematics.) The relationship could be a 
matter of historical connection with the subject or with related matters, or of 
legal, commercial, philosophical, ethical or political position regarding them.

The "Invariant Sections" are certain Secondary Sections whose titles are 
designated, as being those of Invariant Sections, in the notice that says that 
the Document is released under this License. If a section does not fit the 
above definition of Secondary then it is not allowed to be designated as 
Invariant. The Document may contain zero Invariant Sections. If the Document 
does not identify any Invariant Sections then there are none.

The "Cover Texts" are certain short passages of text that are listed, as 
Front-Cover Texts or Back-Cover Texts, in the notice that says that the 
Document is released under this License. A Front-Cover Text may be at most 5 
words, and a Back-Cover Text may be at most 25 words.

A "Transparent" copy of the Document means a machine-readable copy, represented 
in a format whose specification is available to the general public, that is 
suitable for revising the document straightforwardly with generic text editors 
or (for images composed of pixels) generic paint programs or (for drawings) 
some widely available drawing editor, and that is suitable for input to text 
formatters or for automatic translation to a variety of formats suitable for 
input to text formatters. A copy made in an otherwise Transparent file format 
whose markup, or absence of markup, has been arranged to thwart or discourage 
subsequent modification by readers is not Transparent. An image format is not 
Transparent if used for any substantial amount of text. A copy that is not 
"Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain ASCII without 
markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly 
available DTD, and standard-conforming simple HTML, PostScript or PDF designed 
for human modification. Examples of transparent image formats include PNG, XCF 
and JPG. Opaque formats include proprietary formats that can be read and edited 
only by proprietary word processors, SGML or XML for which the DTD and/or 
processing tools are not generally available, and the machine-generated HTML, 
PostScript or PDF produced by some word processors for output purposes only.

The "Title Page" means, for a printed book, the title page itself, plus such 
following pages as are needed to hold, legibly, the material this License 
requires to appear in the title page. For works in formats which do not have 
any title page as such, "Title Page" means the text near the most prominent 
appearance of the work's title, preceding the beginning of the body of the text.

The "publisher" means any person or entity that distributes copies of the 
Document to the public.

A section "Entitled XYZ" means a named subunit of the Document whose title 
either is precisely XYZ or contains XYZ in parentheses following text that 
translates XYZ in another language. (Here XYZ stands for a specific section 
name mentioned below, such as "Acknowledgements", "Dedications", 
"Endorsements", or "History".) To "Preserve the Title" of such a section when 
you modify the Document means that it remains a section "Entitled XYZ" 
according to this definition.

The Document may include Warranty Disclaimers next to the notice which states 
that this License applies to the Document. These Warranty Disclaimers are 
considered to be included by reference in this License, but only as regards 
disclaiming warranties: any other implication that these Warranty Disclaimers 
may have is void and has no effect on the meaning of this License.

=== 2. VERBATIM COPYING
You may copy and distribute the Document in any medium, either commercially or 
noncommercially, provided that this License, the copyright notices, and the 
license notice saying this License applies to the Document are reproduced in 
all copies, and that you add no other conditions whatsoever to those of this 
License. You may not use technical measures to obstruct or control the reading 
or further copying of the copies you make or distribute. However, you may 
accept compensation in exchange for copies. If you distribute a large enough 
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and you may 
publicly display copies.

=== 3. COPYING IN QUANTITY
If you publish printed copies (or copies in media that commonly have printed 
covers) of the Document, numbering more than 100, and the Document's license 
notice requires Cover Texts, you must enclose the copies in covers that carry, 
clearly and legibly, all these Cover Texts: Front-Cover Texts on the front 
cover, and Back-Cover Texts on the back cover. Both covers must also clearly 
and legibly identify you as the publisher of these copies. The front cover must 
present the full title with all words of the title equally prominent and 
visible. You may add other material on the covers in addition. Copying with 
changes limited to the covers, as long as they preserve the title of the 
Document and satisfy these conditions, can be treated as verbatim copying in 
other respects.

If the required texts for either cover are too voluminous to fit legibly, you 
should put the first ones listed (as many as fit reasonably) on the actual 
cover, and continue the rest onto adjacent pages.

If you publish or distribute Opaque copies of the Document numbering more than 
100, you must either include a machine-readable Transparent copy along with 
each Opaque copy, or state in or with each Opaque copy a computer-network 
location from which the general network-using public has access to download 
using public-standard network protocols a complete Transparent copy of the 
Document, free of added material. If you use the latter option, you must take 
reasonably prudent steps, when you begin distribution of Opaque copies in 
quantity, to ensure that this Transparent copy will remain thus accessible at 
the stated location until at least one year after the last time you distribute 
an Opaque copy (directly or through your agents or retailers) of that edition 
to the public.

It is requested, but not required, that you contact the authors of the Document 
well before redistributing any large number of copies, to give them a chance to 
provide you with an updated version of the Document.

=== 4. MODIFICATIONS
You may copy and distribute a Modified Version of the Document under the 
conditions of sections 2 and 3 above, provided that you release the Modified 
Version under precisely this License, with the Modified Version filling the 
role of the Document, thus licensing distribution and modification of the 
Modified Version to whoever possesses a copy of it. In addition, you must do 
these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct from that 
of the Document, and from those of previous versions (which should, if there 
were any, be listed in the History section of the Document). You may use the 
same title as a previous version if the original publisher of that version 
gives permission. 

B. List on the Title Page, as authors, one or more persons or entities 
responsible for authorship of the modifications in the Modified Version, 
together with at least five of the principal authors of the Document (all of 
its principal authors, if it has fewer than five), unless they release you from 
this requirement. 

C. State on the Title page the name of the publisher of the Modified Version, 
as the publisher. 

D. Preserve all the copyright notices of the Document. 

E. Add an appropriate copyright notice for your modifications adjacent to the 
other copyright notices. 

F. Include, immediately after the copyright notices, a license notice giving 
the public permission to use the Modified Version under the terms of this 
License, in the form shown in the Addendum below. 

G. Preserve in that license notice the full lists of Invariant Sections and 
required Cover Texts given in the Document's license notice. 

H. Include an unaltered copy of this License. 

I. Preserve the section Entitled "History", Preserve its Title, and add to it 
an item stating at least the title, year, new authors, and publisher of the 
Modified Version as given on the Title Page. If there is no section Entitled 
"History" in the Document, create one stating the title, year, authors, and 
publisher of the Document as given on its Title Page, then add an item 
describing the Modified Version as stated in the previous sentence. 

J. Preserve the network location, if any, given in the Document for public 
access to a Transparent copy of the Document, and likewise the network 
locations given in the Document for previous versions it was based on. These 
may be placed in the "History" section. You may omit a network location for a 
work that was published at least four years before the Document itself, or if 
the original publisher of the version it refers to gives permission. 

K. For any section Entitled "Acknowledgements" or "Dedications", Preserve the 
Title of the section, and preserve in the section all the substance and tone of 
each of the contributor acknowledgements and/or dedications given therein. 

L. Preserve all the Invariant Sections of the Document, unaltered in their text 
and in their titles. Section numbers or the equivalent are not considered part 
of the section titles. 

M. Delete any section Entitled "Endorsements". Such a section may not be 
included in the Modified Version. 

N. Do not retitle any existing section to be Entitled "Endorsements" or to 
conflict in title with any Invariant Section. 

O. Preserve any Warranty Disclaimers. 

If the Modified Version includes new front-matter sections or appendices that 
qualify as Secondary Sections and contain no material copied from the Document, 
you may at your option designate some or all of these sections as invariant. To 
do this, add their titles to the list of Invariant Sections in the Modified 
Version's license notice. These titles must be distinct from any other section 
titles.

You may add a section Entitled "Endorsements", provided it contains nothing but 
endorsements of your Modified Version by various parties—for example, 
statements of peer review or that the text has been approved by an organization 
as the authoritative definition of a standard.

You may add a passage of up to five words as a Front-Cover Text, and a passage 
of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts 
in the Modified Version. Only one passage of Front-Cover Text and one of 
Back-Cover Text may be added by (or through arrangements made by) any one 
entity. If the Document already includes a cover text for the same cover, 
previously added by you or by arrangement made by the same entity you are 
acting on behalf of, you may not add another; but you may replace the old one, 
on explicit permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License give 
permission to use their names for publicity for or to assert or imply 
endorsement of any Modified Version.

=== 5. COMBINING DOCUMENTS
You may combine the Document with other documents released under this License, 
under the terms defined in section 4 above for modified versions, provided that 
you include in the combination all of the Invariant Sections of all of the 
original documents, unmodified, and list them all as Invariant Sections of your 
combined work in its license notice, and that you preserve all their Warranty 
Disclaimers.

The combined work need only contain one copy of this License, and multiple 
identical Invariant Sections may be replaced with a single copy. If there are 
multiple Invariant Sections with the same name but different contents, make the 
title of each such section unique by adding at the end of it, in parentheses, 
the name of the original author or publisher of that section if known, or else 
a unique number. Make the same adjustment to the section titles in the list of 
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled "History" in the 
various original documents, forming one section Entitled "History"; likewise 
combine any sections Entitled "Acknowledgements", and any sections Entitled 
"Dedications". You must delete all sections Entitled "Endorsements".

=== 6. COLLECTIONS OF DOCUMENTS
You may make a collection consisting of the Document and other documents 
released under this License, and replace the individual copies of this License 
in the various documents with a single copy that is included in the collection, 
provided that you follow the rules of this License for verbatim copying of each 
of the documents in all other respects.

You may extract a single document from such a collection, and distribute it 
individually under this License, provided you insert a copy of this License 
into the extracted document, and follow this License in all other respects 
regarding verbatim copying of that document.

=== 7. AGGREGATION WITH INDEPENDENT WORKS
A compilation of the Document or its derivatives with other separate and 
independent documents or works, in or on a volume of a storage or distribution 
medium, is called an "aggregate" if the copyright resulting from the 
compilation is not used to limit the legal rights of the compilation's users 
beyond what the individual works permit. When the Document is included in an 
aggregate, this License does not apply to the other works in the aggregate 
which are not themselves derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these copies of the 
Document, then if the Document is less than one half of the entire aggregate, 
the Document's Cover Texts may be placed on covers that bracket the Document 
within the aggregate, or the electronic equivalent of covers if the Document is 
in electronic form. Otherwise they must appear on printed covers that bracket 
the whole aggregate.

=== 8. TRANSLATION
Translation is considered a kind of modification, so you may distribute 
translations of the Document under the terms of section 4. Replacing Invariant 
Sections with translations requires special permission from their copyright 
holders, but you may include translations of some or all Invariant Sections in 
addition to the original versions of these Invariant Sections. You may include 
a translation of this License, and all the license notices in the Document, and 
any Warranty Disclaimers, provided that you also include the original English 
version of this License and the original versions of those notices and 
disclaimers. In case of a disagreement between the translation and the original 
version of this License or a notice or disclaimer, the original version will 
prevail.

If a section in the Document is Entitled "Acknowledgements", "Dedications", or 
"History", the requirement (section 4) to Preserve its Title (section 1) will 
typically require changing the actual title.

=== 9. TERMINATION
You may not copy, modify, sublicense, or distribute the Document except as 
expressly provided under this License. Any attempt otherwise to copy, modify, 
sublicense, or distribute it is void, and will automatically terminate your 
rights under this License.

However, if you cease all violation of this License, then your license from a 
particular copyright holder is reinstated (a) provisionally, unless and until 
the copyright holder explicitly and finally terminates your license, and (b) 
permanently, if the copyright holder fails to notify you of the violation by 
some reasonable means prior to 60 days after the cessation.

Moreover, your license from a particular copyright holder is reinstated 
permanently if the copyright holder notifies you of the violation by some 
reasonable means, this is the first time you have received notice of violation 
of this License (for any work) from that copyright holder, and you cure the 
violation prior to 30 days after your receipt of the notice.

Termination of your rights under this section does not terminate the licenses 
of parties who have received copies or rights from you under this License. If 
your rights have been terminated and not permanently reinstated, receipt of a 
copy of some or all of the same material does not give you any rights to use it.

=== 10. FUTURE REVISIONS OF THIS LICENSE
The Free Software Foundation may publish new, revised versions of the GNU Free 
Documentation License from time to time. Such new versions will be similar in 
spirit to the present version, but may differ in detail to address new problems 
or concerns. See http://www.gnu.org/copyleft/.

Each version of the License is given a distinguishing version number. If the 
Document specifies that a particular numbered version of this License "or any 
later version" applies to it, you have the option of following the terms and 
conditions either of that specified version or of any later version that has 
been published (not as a draft) by the Free Software Foundation. If the 
Document does not specify a version number of this License, you may choose any 
version ever published (not as a draft) by the Free Software Foundation. If the 
Document specifies that a proxy can decide which future versions of this 
License can be used, that proxy's public statement of acceptance of a version 
permanently authorizes you to choose that version for the Document.

=== 11. RELICENSING
"Massive Multiauthor Collaboration Site" (or "MMC Site") means any World Wide 
Web server that publishes copyrightable works and also provides prominent 
facilities for anybody to edit those works. A public wiki that anybody can edit 
is an example of such a server. A "Massive Multiauthor Collaboration" (or 
"MMC") contained in the site means any set of copyrightable works thus 
published on the MMC site.

"CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0 license 
published by Creative Commons Corporation, a not-for-profit corporation with a 
principal place of business in San Francisco, California, as well as future 
copyleft versions of that license published by that same organization.

"Incorporate" means to publish or republish a Document, in whole or in part, as 
part of another Document.

An MMC is "eligible for relicensing" if it is licensed under this License, and 
if all works that were first published under this License somewhere other than 
this MMC, and subsequently incorporated in whole or in part into the MMC, (1) 
had no cover texts or invariant sections, and (2) were thus incorporated prior 
to November 1, 2008.

The operator of an MMC Site may republish an MMC contained in the site under 
CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC 
is eligible for relicensing.

